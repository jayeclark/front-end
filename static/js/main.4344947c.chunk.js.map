{"version":3,"sources":["assets/nf-favicon.ico","assets/ap-favicon-m.ico","App.js","reportWebVitals.js","index.js"],"names":["Netflix","React","lazy","Apple","icons","nf","nfIcon","ap","apIcon","NFSiteLoader","fallback","APSiteLoader","App","useState","site","siteURL","setSite","iconLink","document","getElementById","href","siteProps","siteData","pageTitle","innerHTML","title","pageMetaDesc","setAttribute","metaDescription","pageCSS","pageCSSRef","refReplace","replace","handleSetSite","e","siteCode","target","id","showContent","body","getElementsByTagName","style","transitionProperty","transitionDuration","transitionTimingFunction","backgroundColor","getElementsByClassName","classList","remove","setTimeout","tempSite","newSiteURL","add","newSiteProps","toString","adjustPageData","className","height","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4344947c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nf-favicon.a7aca499.ico\";","export default __webpack_public_path__ + \"static/media/ap-favicon-m.955407ca.ico\";","import nfIcon from './assets/nf-favicon.ico';\nimport apIcon from './assets/ap-favicon-m.ico';\nimport siteData from './data/sites.json';\nimport React, {useState, Suspense} from 'react';\nimport './App.css';\n\nconst Netflix = React.lazy(() => import('./components/main/Netflix.js'));\nconst Apple = React.lazy(() => import('./components/main/Apple.js'));\nconst icons = {nf: nfIcon, ap:apIcon}\n\nconst NFSiteLoader = () => (<Suspense fallback={<></>}><Netflix></Netflix></Suspense>)\nconst APSiteLoader = () => (<Suspense fallback={<></>}><Apple></Apple></Suspense>)\n\nfunction App() {\n\n  const [site, setSite] = useState({site:'nf', siteURL: <NFSiteLoader></NFSiteLoader>});\n\n  let iconLink = document.getElementById('icon');\n  iconLink.href = icons[site.site];\n\n  let siteProps = siteData[site.site];\n\n  let pageTitle = document.getElementById('page-title');\n  pageTitle.innerHTML = siteProps.title;\n\n  let pageMetaDesc = document.getElementById('meta-description');\n  pageMetaDesc.setAttribute(\"content\",siteProps.metaDescription);\n\n  let pageCSS = document.getElementById('main-style');\n  let pageCSSRef = pageCSS.href;\n  let refReplace = '/front-end/style/'+site.site+'.css';\n  pageCSSRef = pageCSSRef.replace(/\\/front-end\\/style\\/.+\\.css/i,refReplace);\n  pageCSS.setAttribute(\"href\",pageCSSRef);\n\n  const adjustPageData = siteCode => {\n\n    iconLink.href = icons[siteCode];\n    let newSiteProps = siteData[siteCode];\n    pageTitle.innerHTML = newSiteProps.title;\n    pageMetaDesc.setAttribute(\"content\", newSiteProps.metaDescription);\n    let pageCSS = document.getElementById('main-style');\n    let pageCSSRef = pageCSS.href.toString();\n    let refReplace =  '/front-end/style/'+site.site+'.css';\n    pageCSSRef = pageCSSRef.replace(/\\/front-end\\/style\\/.+\\.css/i,refReplace);\n    pageCSS.setAttribute(\"href\",pageCSSRef);\n    \n  }\n  \n  //const randomSite = () => {\n  //  let sites = ['nf','sf','ad','ab','nv','am'].filter(x=> x !== site);\n  //  let random = Math.floor(Math.random())*(sites.length);\n  //  setSite(sites[random]);\n  //}\n\n  const handleSetSite = (e) => {\n\n    const siteCode = e.target.id;\n\n    const newSiteURL = (siteCode) => {\n\n      switch (siteCode) {\n  \n        case siteCode === 'nf' :\n          return (<NFSiteLoader></NFSiteLoader>)\n  \n        case siteCode === 'ap' :\n          return (<APSiteLoader></APSiteLoader>)\n\n        default :\n          return (<APSiteLoader></APSiteLoader>)\n  \n      }\n\n    }\n\n    const hideContent = () => {\n      let body = document.getElementsByTagName('body')[0];\n      body.style.backgroundColor = \"black\";\n      let content = document.getElementsByClassName(\"main-content\")[0];\n      content.classList.add('invisible');\n    }\n\n    const showContent = () => {\n      let body = document.getElementsByTagName('body')[0];\n      body.style.transitionProperty = \"background-color\";\n      body.style.transitionDuration = \"0.4s\";\n      body.style.transitionTimingFunction = \"ease\";\n      body.style.backgroundColor = null;\n      let content = document.getElementsByClassName(\"main-content\")[0];\n      content.classList.remove('invisible');\n      setTimeout(()=> {\n        body.style.transitionProperty = null;\n        body.style.transitionDuration = null;\n        body.style.transitionTimingFunction = null;\n      },400)\n    }\n\n    const tempSite = {site: siteCode, siteURL: newSiteURL(siteCode)}\n    hideContent();\n    adjustPageData(siteCode);\n    setTimeout(()=>{\n      setSite(tempSite);\n      setTimeout(showContent,100)\n    },100);\n  \n  }\n\n  //React.useEffect(()=> {\n  //  adjustPageData(site.site);\n  //}, [site, adjustPageData]);\n\n  return (\n\n      <div className=\"App\">\n        \n          <div className=\"header\" style={{height:\"47px\"}}></div>\n          <div id=\"main-navbar\" className=\"main-navbar\">\n              <a href=\"#ap\" id=\"ap\" className=\"option\" onClick={e => handleSetSite(e)}>Apple</a>\n              <a href=\"#nf\" id=\"nf\" className=\"option\" onClick={e => handleSetSite(e)}>Netflix</a>\n          </div>\n          <div className=\"main-content\">\n            <div className=\"content\">\n              {site.site === 'nf' ? <NFSiteLoader></NFSiteLoader> : <APSiteLoader></APSiteLoader>}\n            </div>\n          </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}